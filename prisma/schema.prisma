generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contacts Contact[]
  tasks    Task[]
  activities Activity[]

  @@map("users")
}

model Contact {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String?
  company     String?
  phone       String?
  website     String?
  status      ContactStatus @default(ACTIVE)
  source      String?
  tags        String[]
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  userId      String
  
  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  activities  Activity[]

  @@map("contacts")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Foreign keys
  userId      String
  contactId   String?

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact     Contact?   @relation(fields: [contactId], references: [id], onDelete: SetNull)
  activities  Activity[]

  @@map("tasks")
}

model Activity {
  id        String       @id @default(cuid())
  type      ActivityType
  title     String
  content   String?
  metadata  Json?
  createdAt DateTime     @default(now())

  // Foreign keys
  userId    String
  contactId String?
  taskId    String?

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@map("activities")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ContactStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  CUSTOMER
  FORMER_CUSTOMER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  CONTACT_CREATED
  CONTACT_UPDATED
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  EMAIL_SENT
  CALL_MADE
  MEETING_SCHEDULED
  NOTE_ADDED
}
