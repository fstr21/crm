services:
  postgres:
    image: postgres:15-alpine
    container_name: crm-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-crm}
      POSTGRES_USER: postgres
    volumes:
      - .docker/volumes/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d crm"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crm-app
    ports:
      - "3001:3000"
      - "5555:5555"
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-crm}?sslmode=disable
      NODE_ENV: development
    volumes:
      - .:/app
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
    command: npm run dev

  redis:
    image: redis:7-alpine
    container_name: crm-redis
    ports:
      - "6379:6379"
    volumes:
      - .docker/volumes/redis:/data
    command: redis-server --appendonly yes

  mcp-orchestra:
    build:
      context: .docker/mcp-orchestra
      dockerfile: Dockerfile
    container_name: crm-mcp-orchestra
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    env_file:
      - .docker/mcp-orchestra/.env
    depends_on:
      - app
      - postgres

  zen-mcp:
    build:
      context: .docker/zen-mcp
      dockerfile: Dockerfile
    container_name: crm-zen-mcp
    ports:
      - "3020:3020"
    env_file:
      - .docker/zen-mcp/.env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - app
    command: ["python", "/app/server.py"]
    tty: true
    stdin_open: true

  context7:
    build:
      context: .docker/context7
      dockerfile: Dockerfile
    container_name: crm-context7
    volumes:
      - ./logs:/app/logs
    depends_on:
      - app
    stdin_open: true
    tty: true
    command: ["tail", "-f", "/dev/null"]

  puppeteer-mcp:
    build:
      context: .docker/puppeteer-mcp
      dockerfile: Dockerfile
    container_name: crm-puppeteer-mcp
    environment:
      - DOCKER_CONTAINER=true
      - NODE_ENV=production
    volumes:
      - ./screenshots:/app/screenshots
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_ADMIN
    depends_on:
      - app
    stdin_open: true
    tty: true
    restart: unless-stopped

  supabase-mcp:
    build:
      context: .docker/supabase-mcp
      dockerfile: Dockerfile
    container_name: crm-supabase-mcp
    ports:
      - "3030:3030"
    env_file:
      - .docker/supabase-mcp/.env
    volumes:
      - ./logs:/app/logs
    depends_on:
      - app
    command: npm run http
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  default:
    name: crm-network